{"version":3,"sources":["Components/Header.jsx","AssetConfig.js","Components/AsaLaunchForm.jsx","Components/Application.jsx","App.js","reportWebVitals.js","index.js"],"names":["confirm","Modal","NetButton","props","type","className","style","float","marginRight","onClick","title","activeNet","icon","ExclamationCircleOutlined","content","okText","cancelText","onOk","onNetChange","Promise","resolve","reject","setTimeout","Math","random","catch","console","log","onCancel","Header","useState","height","display","justifyContent","color","alert","waitForConfirmation","algodclient","txId","a","status","do","response","lastround","pendingTransactionInformation","pendingInfo","statusAfterBlock","printCreatedAsset","account","assetid","accountInformation","accountInfo","idx","length","scrutinizedAsset","JSON","stringify","undefined","printAssetHolding","createAsset","asset_name","unit_name","asset_total","asset_decimals","algosdk","Algodv2","generateAccount","passphrase","secretKeyToMnemonic","sk","recoveredAccount1","mnemonicToSecretKey","getTransactionParams","params","fee","flatFee","parseInt","addr","decimals","totalIssuance","unitName","assetName","manager","reserve","freeze","clawback","txn","makeAssetCreateTxnWithSuggestedParams","rawSignedTxn","signTxn","sendRawTransaction","tx","assetID","ptx","assetId","managingAccount","managingPassphrase","e","SpinAnimation","Form","isLoading","setIsLoading","isExploding","setIsExploding","useForm","control","handleSubmit","success","assetLink","href","onSubmit","data","assetTotal","assetDecimals","value","createAssetResponse","error","message","marginTop","render","field","name","defaultValue","rules","required","options","label","Application","AsaLaunchForm","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ba946f9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport \"../style.css\";\nimport { Modal, Button } from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n\n\nconst { confirm } = Modal;\n\nconst Header = () => {\n  const [activeNet, setActiveNet] = useState('Test Net');\n  return (\n    <>\n    <div style={{height:'20px'}}></div>\n    <div style={{height:'120px'}}>\n      <div style={{display: 'flex',  justifyContent:'center'}}>\n      <span style={{color:'white'}} className=\"big_sentence\">AlgoGen<span className=\"input-cursor\"></span></span>\n      </div>\n    </div>\n    <div style={{height:'80px', float:'right', marginRight:'10%'}}>\n      <NetButton activeNet={activeNet} onNetChange={() => {\n        alert('This feature isn\\'t quite ready yet!');\n        if (activeNet === 'Main Net') {\n          //setActiveNet('Test Net');\n        } else {\n          //setActiveNet('Main Net');\n        }\n      }}\n        />\n    </div>\n    <div style={{height:'70px'}}></div>\n    </>\n  );\n};\n\n const NetButton = (props) => {\n  const nonActiveNet = () => {\n        if (props.activeNet === 'Test Net') {\n          return 'Main Net';\n        } else {\n          return 'Test Net';\n        }\n  }\n\n  return (\n      <Button\n      type=\"primary\"\n      className=\"netButton\"\n      style={{float:'right', marginRight:'10%'}} \n      onClick={() => \n              confirm({\n          title: 'Do you want to switch to the '+ nonActiveNet() +'?',\n          icon: <ExclamationCircleOutlined />,\n          content: 'You are currently configuring a token on the ' + props.activeNet,\n          okText: 'Yes',\n          cancelText: 'No',\n          onOk() {\n            props.onNetChange();\n            return new Promise((resolve, reject) => {\n              setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);\n            }).catch(() => console.log('Oops errors!'));\n          },\n          onCancel() {},\n        })\n      }\n      >{props.activeNet}\n      </Button>\n        );\n };\n\nexport default Header;","import algosdk from 'algosdk';\n\n// Function used to wait for a tx confirmation\nconst waitForConfirmation = async function (algodclient, txId) {\n    let response = await algodclient.status().do();\n    let lastround = response[\"last-round\"];\n    while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n            //Got the completed Transaction\n            break;\n        }\n        lastround++;\n        await algodclient.statusAfterBlock(lastround).do();\n    }\n};\n\n\n// Function used to print created asset for account and assetid\nconst printCreatedAsset = async function (algodclient, account, assetid) {\n    // note: if you have an indexer instance available it is easier to just use this\n    //     let accountInfo = await indexerClient.searchAccounts()\n    //    .assetID(assetIndex).do();\n    // and in the loop below use this to extract the asset for a particular account\n    // accountInfo['accounts'][idx][account]);\n    let accountInfo = await algodclient.accountInformation(account).do();\n    for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['created-assets'][idx];\n        if (scrutinizedAsset['index'] == assetid) {\n            let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n            break;\n        }\n    }\n};\n// Function used to print asset holding for account and assetid\nconst printAssetHolding = async function (algodclient, account, assetid) {\n    // note: if you have an indexer instance available it is easier to just use this\n    //     let accountInfo = await indexerClient.searchAccounts()\n    //    .assetID(assetIndex).do();\n    // and in the loop below use this to extract the asset for a particular account\n    // accountInfo['accounts'][idx][account]);\n    let accountInfo = await algodclient.accountInformation(account).do();\n    for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['assets'][idx];\n        if (scrutinizedAsset['asset-id'] == assetid) {\n            let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\n            break;\n        }\n    }\n};\n\nexport const createAsset = (asset_name, unit_name, asset_total, asset_decimals) => new Promise((resolve, reject) => {\n// Retrieve the token, server and port values for your installation in the \n// algod.net and algod.token files within the data directory\n\n//defining algod client\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\nconst port = \"\";\nconst token = {\n    \"X-API-Key\": \"cfoNpaCzsF9xJRTOO39rF78aJRbK4fqj4W8LNv6k\",\n};\n\n// Instantiate the algod wrapper\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\n\nconst account = algosdk.generateAccount();\nconst passphrase = algosdk.secretKeyToMnemonic(account.sk);\n\n\n\n// Recover accounts\n// paste in mnemonic phrases here for each account\n\nvar account1_mnemonic = \"code thrive mouse code badge example pride stereo sell viable adjust planet text close erupt embrace nature upon february weekend humble surprise shrug absorb faint\"\n\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n\n(async () => {\n    // Asset Creation:\n    // The first transaction is to create a new asset\n    // Get last round and suggested tx fee\n    // We use these to get the latest round and tx fees\n    // These parameters will be required before every \n    // Transaction\n    // We will account for changing transaction parameters\n    // before every transaction in this example\n    let params = await algodclient.getTransactionParams().do();\n    //comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    asset_total = parseInt(asset_total);\n\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\n\n    // Asset creation specific parameters\n    // The following parameters are asset specific\n    // Throughout the example these will be re-used. \n    // We will also change the manager later in the example\n    let addr = recoveredAccount1.addr;\n    // Whether user accounts will need to be unfrozen before transacting    \n    let defaultFrozen = false;\n    // integer number of decimals for asset unit calculation\n    let decimals = parseInt(asset_decimals);\n    // total number of this asset available for circulation   \n    let totalIssuance = asset_total;\n    // Used to display asset units to user    \n    let unitName = unit_name;\n    // Friendly name of the asset    \n    let assetName = asset_name;\n    // Optional string pointing to a URL relating to the asset\n    let assetURL = \"http://someurl\";\n    // Optional hash commitment of some sort relating to the asset. 32 character length.\n    let assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\";\n    // The following parameters are the only ones\n    // that can be changed, and they have to be changed\n    // by the current manager\n    // Specified address can change reserve, freeze, clawback, and manager\n    let manager = recoveredAccount1.addr;\n    // Specified address is considered the asset reserve\n    // (it has no special privileges, this is only informational)\n    let reserve = recoveredAccount1.addr;\n    // Specified address can freeze or unfreeze user asset holdings \n    let freeze = recoveredAccount1.addr;\n    // Specified address can revoke user asset holdings and send \n    // them to other addresses    \n    let clawback = recoveredAccount1.addr;\n\n    // signing and sending \"txn\" allows \"addr\" to create an asset\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note,\n        totalIssuance, decimals, defaultFrozen, manager, reserve, freeze,\n        clawback, unitName, assetName, assetURL, assetMetadataHash, params);\n\n    let rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\n    let tx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\n    let assetID = null;\n    // wait for transaction to be confirmed\n    await waitForConfirmation(algodclient, tx.txId);\n    // Get the new asset's information from the creator account\n    let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\n    assetID = ptx[\"asset-index\"];\n\n    await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n    await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\n\n    resolve({assetId:assetID, assetName: assetName, managingAccount: recoveredAccount1.addr, managingPassphrase:passphrase});\n})().catch(e => {\n    reject(e);\n});\n})\n\n\nexport const destroyAsset = (assetID, managingAccount) => {\n    \n    (async () => {\n     //defining algod client\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\";\n    const token = {\n        \"X-API-Key\": \"cfoNpaCzsF9xJRTOO39rF78aJRbK4fqj4W8LNv6k\",\n    };\n\n    // Instantiate the algod wrapper\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    // destroying the newly created asset\n    // Destroy and Asset:\n    // All of the created assets should now be back in the creators\n    // Account so we can delete the asset.\n    // If this is not the case the asset deletion will fail\n\n    // First update changing transaction parameters\n    // We will account for changing transaction parameters\n    // before every transaction in this example\n\n    let params = await algodclient.getTransactionParams().do();\n    //comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    // The address for the from field must be the manager account\n    // Which is currently the creator addr1\n    let addr = managingAccount.addr;\n    let note = undefined;\n    // if all assets are held by the asset creator,\n    // the asset creator can sign and issue \"txn\" to remove the asset from the ledger. \n    let dtxn = algosdk.makeAssetDestroyTxnWithSuggestedParams(addr, note, assetID, params);\n    // The transaction must be signed by the manager which \n    // is currently set to account1\n    let rawSignedTxn = dtxn.signTxn(managingAccount.sk)\n    let dtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\n    // wait for transaction to be confirmed\n    await waitForConfirmation(algodclient, dtx.txId);\n\n    // The account3 and account1 should no longer contain the asset as it has been destroyed\n    await printCreatedAsset(algodclient, managingAccount.addr, assetID);\n    await printAssetHolding(algodclient, managingAccount.addr, assetID);\n    })().catch(e => {\n    console.trace();\n});\n}","import React, { useState } from 'react';\nimport \"../style.css\";\nimport Select from \"react-select\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { Input as AntdInput } from \"antd\";\nimport { Modal, Spin } from 'antd';\nimport ConfettiExplosion from '@reonomy/react-confetti-explosion';\nimport {createAsset} from \"../AssetConfig\";\n\nconst Form = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isExploding, setIsExploding] = useState(false);\n  \n  const { control, handleSubmit } = useForm();\n  \n\n  const onSubmit = (data) => {\n    setIsLoading(true);\n    (async () => {\n      var createAssetResponse = await createAsset(data.assetName, data.unitName, data.assetTotal, data.assetDecimals.value);\n      success(createAssetResponse.assetId, createAssetResponse.assetName, createAssetResponse.managingAccount, createAssetResponse.managingPassphrase);\n      setIsLoading(false);\n      setIsExploding(true);\n    })().catch(e => {\n    error(JSON.stringify(e.message));\n    setIsLoading(false);\n}\n);\n}\n\n  function success(assetId, assetName, managingAccount, managingPassphrase) {\n  const assetLink = 'https://testnet.algoexplorer.io/asset/' + assetId;\n  Modal.success({\n    title: 'Congrats! ' + assetName + ' has been created!',\n    content:     \n    (\n      <div>\n        <p>Click here for a summary of your asset:</p>\n        <a href={assetLink}>{assetLink}</a>\n      </div>\n    ),\n  });\n  }\n  \n\nfunction error(error) {\n  Modal.error({\n    title: 'Oops, that didn\\'t work',\n    content: \n    (\n      <div>\n        <p>Here's the error we received:</p>\n        <code>{error}</code>\n      </div>\n    ),\n  });\n}\n\n  return (\n    <>\n    {isLoading && <SpinAnimation />}\n    {!isLoading && \n<form onSubmit={handleSubmit(onSubmit)}>\n    {isExploding && <ConfettiExplosion />}\n      <label style={{marginTop:'50px'}}>Asset Name</label>\n      <Controller\n        render={({ field }) => <AntdInput {...field} />}\n        name=\"assetName\"\n        control={control}\n        defaultValue=\"\"\n      />\n      <label>Unit Name</label>\n      <Controller\n        render={({ field }) => <AntdInput {...field} />}\n        name=\"unitName\"\n        control={control}\n        defaultValue=\"\"\n      />\n      <label>Asset Total</label>\n      <Controller\n        render={({ field }) => <AntdInput {...field} />}\n        rules={[{ required: true }]}\n        name=\"assetTotal\"\n        control={control}\n        defaultValue=\"\"\n      />\n      <label>Asset Decimals</label>\n      <Controller\n        name=\"assetDecimals\"\n        render={({ field }) => (\n          <Select\n            {...field}\n            className=\"asset_decimals\"\n            options={\n              [\n              { value: \"0\", label: \"0\" },\n              { value: \"1\", label: \"1\" },\n              { value: \"2\", label: \"2\" },\n              { value: \"3\", label: \"3\" },\n              { value: \"4\", label: \"4\" },\n              { value: \"5\", label: \"5\" },\n              { value: \"6\", label: \"6\" },\n              { value: \"7\", label: \"7\" },\n              { value: \"8\", label: \"8\" },\n              { value: \"9\", label: \"9\" },\n              { value: \"10\", label: \"10\" },\n            ]}\n          />\n        )}\n        control={control}\n        defaultValue={{ value: \"0\", label: \"0\" }}\n      />\n\n      \n      \n       \n      <input className=\"submit_button buttonStyled\" type=\"submit\" />\n    </form>\n    }\n    </>\n  )};\n\nconst SpinAnimation = () => {\n\n\n  return (\n  <div className=\"spin_div\">\n    <Spin />\n  </div>\n  );\n};\n\nexport default Form;","import React from \"react\";\nimport Header from \"./Header\";\nimport AsaLaunchForm from \"./AsaLaunchForm\";\n\nfunction Application() {\n  return (\n\n      <>\n      <Header />\n      <AsaLaunchForm />\n      </>\n\n  );\n}\nexport default Application;","import Application from \"./Components/Application\";\n\nconst App = () => {\n\n\n  return (\n      <Application />\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}